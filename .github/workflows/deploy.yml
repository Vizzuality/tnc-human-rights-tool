name: Run deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'client/**'
      - 'api/**'
      - '.github/workflows/*'
      - 'infrastructure/**'

jobs:
  build_client_image:
    name: Build Client image and push to Amazon ECR
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy env variables to docker
        run: |
          echo "${{ secrets.STAGING_CLIENT_ENV_FILE }}" > client/.env.local

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push Client image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tnc-hrt-staging-client
          IMAGE_TAG: client-${{ github.sha }}
        run: |
          docker build -f client/Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./client
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  build_api_image:
    name: Build API image and push to Amazon ECR
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy env variables to docker
        env:
          STAGING_API_ENV_FILE: ${{ secrets.STAGING_API_ENV_FILE }}
        run: |
          echo $STAGING_API_ENV_FILE > api/.env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push API image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tnc-hrt-staging-api
          IMAGE_TAG: api-${{ github.sha }}
        run: |
          docker build -f api/Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy Client and API to Amazon EB
    needs: [build_client_image, build_api_image]
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Generate docker compose file
        working-directory: infrastructure/source_bundle
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_CLIENT: tnc-hrt-staging-client
          IMAGE_TAG_CLIENT: client-${{ github.sha }}
          ECR_REPOSITORY_API: tnc-hrt-staging-api
          IMAGE_TAG_API: api-${{ github.sha }}
        run: |
          echo "version: '3.3'" > docker-compose.yml
          echo "services:" >> docker-compose.yml
          echo "  client:" >> docker-compose.yml
          echo "    image: $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:$IMAGE_TAG_CLIENT" >> docker-compose.yml
          echo "    ports:" >> docker-compose.yml
          echo "      - 3000:3000" >> docker-compose.yml
          echo "  api:" >> docker-compose.yml
          echo "    image: $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG_API" >> docker-compose.yml
          echo "    ports:" >> docker-compose.yml
          echo "      - 1337:1337" >> docker-compose.yml
          echo "  nginx:" >> docker-compose.yml
          echo "    image: nginx" >> docker-compose.yml
          echo "    volumes:" >> docker-compose.yml
          echo "      - ./proxy/conf.d:/etc/nginx/conf.d" >> docker-compose.yml
          echo "      - \"\${EB_LOG_BASE_DIR}/nginx:/var/log/nginx\"" >> docker-compose.yml
          echo "    ports:" >> docker-compose.yml
          echo "      - 80:80" >> docker-compose.yml
          echo "    depends_on:" >> docker-compose.yml
          echo "      - api" >> docker-compose.yml
          echo "      - client" >> docker-compose.yml

      - name: Generate zip file
        working-directory: infrastructure/source_bundle
        run: |
          zip -r deploy.zip * .[^.]*

      - name: Deploy to Amazon EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.PIPELINE_USER_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.PIPELINE_USER_SECRET_ACCESS_KEY }}
          application_name: tnc-hrt-staging
          environment_name: tnc-hrt-staging-environment
          region: ${{ vars.AWS_REGION }}
          version_label: ${{ github.sha }}
          deployment_package: infrastructure/source_bundle/deploy.zip
