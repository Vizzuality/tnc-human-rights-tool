/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  ContextualRiskCategoryListResponse,
  Error,
  GetContextualRiskCategoriesParams,
  ContextualRiskCategoryResponse,
  ContextualRiskCategoryRequest,
  GetContextualRiskCategoriesIdParams,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

export const getContextualRiskCategories = (
  params?: GetContextualRiskCategoriesParams,
  signal?: AbortSignal,
) => {
  return API<ContextualRiskCategoryListResponse>({
    url: `/contextual-risk-categories`,
    method: "get",
    params,
    signal,
  });
};

export const getGetContextualRiskCategoriesQueryKey = (
  params?: GetContextualRiskCategoriesParams,
) => [`/contextual-risk-categories`, ...(params ? [params] : [])] as const;

export const getGetContextualRiskCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getContextualRiskCategories>>,
  TError = ErrorType<Error>,
>(
  params?: GetContextualRiskCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getContextualRiskCategories>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getContextualRiskCategories>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContextualRiskCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContextualRiskCategories>>> = ({
    signal,
  }) => getContextualRiskCategories(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetContextualRiskCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContextualRiskCategories>>
>;
export type GetContextualRiskCategoriesQueryError = ErrorType<Error>;

export const useGetContextualRiskCategories = <
  TData = Awaited<ReturnType<typeof getContextualRiskCategories>>,
  TError = ErrorType<Error>,
>(
  params?: GetContextualRiskCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getContextualRiskCategories>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetContextualRiskCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postContextualRiskCategories = (
  contextualRiskCategoryRequest: ContextualRiskCategoryRequest,
) => {
  return API<ContextualRiskCategoryResponse>({
    url: `/contextual-risk-categories`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: contextualRiskCategoryRequest,
  });
};

export const getPostContextualRiskCategoriesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postContextualRiskCategories>>,
    TError,
    { data: ContextualRiskCategoryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postContextualRiskCategories>>,
  TError,
  { data: ContextualRiskCategoryRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postContextualRiskCategories>>,
    { data: ContextualRiskCategoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postContextualRiskCategories(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostContextualRiskCategoriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postContextualRiskCategories>>
>;
export type PostContextualRiskCategoriesMutationBody = ContextualRiskCategoryRequest;
export type PostContextualRiskCategoriesMutationError = ErrorType<Error>;

export const usePostContextualRiskCategories = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postContextualRiskCategories>>,
    TError,
    { data: ContextualRiskCategoryRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostContextualRiskCategoriesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getContextualRiskCategoriesId = (
  id: number,
  params?: GetContextualRiskCategoriesIdParams,
  signal?: AbortSignal,
) => {
  return API<ContextualRiskCategoryResponse>({
    url: `/contextual-risk-categories/${id}`,
    method: "get",
    params,
    signal,
  });
};

export const getGetContextualRiskCategoriesIdQueryKey = (
  id: number,
  params?: GetContextualRiskCategoriesIdParams,
) => [`/contextual-risk-categories/${id}`, ...(params ? [params] : [])] as const;

export const getGetContextualRiskCategoriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getContextualRiskCategoriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetContextualRiskCategoriesIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getContextualRiskCategoriesId>>,
      TError,
      TData
    >;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getContextualRiskCategoriesId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContextualRiskCategoriesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContextualRiskCategoriesId>>> = ({
    signal,
  }) => getContextualRiskCategoriesId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetContextualRiskCategoriesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContextualRiskCategoriesId>>
>;
export type GetContextualRiskCategoriesIdQueryError = ErrorType<Error>;

export const useGetContextualRiskCategoriesId = <
  TData = Awaited<ReturnType<typeof getContextualRiskCategoriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetContextualRiskCategoriesIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getContextualRiskCategoriesId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetContextualRiskCategoriesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putContextualRiskCategoriesId = (
  id: number,
  contextualRiskCategoryRequest: ContextualRiskCategoryRequest,
) => {
  return API<ContextualRiskCategoryResponse>({
    url: `/contextual-risk-categories/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: contextualRiskCategoryRequest,
  });
};

export const getPutContextualRiskCategoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putContextualRiskCategoriesId>>,
    TError,
    { id: number; data: ContextualRiskCategoryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putContextualRiskCategoriesId>>,
  TError,
  { id: number; data: ContextualRiskCategoryRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putContextualRiskCategoriesId>>,
    { id: number; data: ContextualRiskCategoryRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putContextualRiskCategoriesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutContextualRiskCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putContextualRiskCategoriesId>>
>;
export type PutContextualRiskCategoriesIdMutationBody = ContextualRiskCategoryRequest;
export type PutContextualRiskCategoriesIdMutationError = ErrorType<Error>;

export const usePutContextualRiskCategoriesId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putContextualRiskCategoriesId>>,
    TError,
    { id: number; data: ContextualRiskCategoryRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutContextualRiskCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteContextualRiskCategoriesId = (id: number) => {
  return API<number>({ url: `/contextual-risk-categories/${id}`, method: "delete" });
};

export const getDeleteContextualRiskCategoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteContextualRiskCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteContextualRiskCategoriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteContextualRiskCategoriesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteContextualRiskCategoriesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteContextualRiskCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteContextualRiskCategoriesId>>
>;

export type DeleteContextualRiskCategoriesIdMutationError = ErrorType<Error>;

export const useDeleteContextualRiskCategoriesId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteContextualRiskCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteContextualRiskCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
