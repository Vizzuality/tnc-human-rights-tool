/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  MessageListResponse,
  Error,
  GetMessagesParams,
  MessageResponse,
  MessageRequest,
  GetMessagesIdParams,
  MessageLocalizationResponse,
  MessageLocalizationRequest,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

export const getMessages = (params?: GetMessagesParams, signal?: AbortSignal) => {
  return API<MessageListResponse>({ url: `/messages`, method: "get", params, signal });
};

export const getGetMessagesQueryKey = (params?: GetMessagesParams) =>
  [`/messages`, ...(params ? [params] : [])] as const;

export const getGetMessagesQueryOptions = <
  TData = Awaited<ReturnType<typeof getMessages>>,
  TError = ErrorType<Error>,
>(
  params?: GetMessagesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMessagesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMessages>>> = ({ signal }) =>
    getMessages(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getMessages>>>;
export type GetMessagesQueryError = ErrorType<Error>;

export const useGetMessages = <
  TData = Awaited<ReturnType<typeof getMessages>>,
  TError = ErrorType<Error>,
>(
  params?: GetMessagesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMessagesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postMessages = (messageRequest: MessageRequest) => {
  return API<MessageResponse>({
    url: `/messages`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: messageRequest,
  });
};

export const getPostMessagesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMessages>>,
    TError,
    { data: MessageRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMessages>>,
  TError,
  { data: MessageRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMessages>>,
    { data: MessageRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postMessages(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMessagesMutationResult = NonNullable<Awaited<ReturnType<typeof postMessages>>>;
export type PostMessagesMutationBody = MessageRequest;
export type PostMessagesMutationError = ErrorType<Error>;

export const usePostMessages = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMessages>>,
    TError,
    { data: MessageRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostMessagesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getMessagesId = (id: number, params?: GetMessagesIdParams, signal?: AbortSignal) => {
  return API<MessageResponse>({ url: `/messages/${id}`, method: "get", params, signal });
};

export const getGetMessagesIdQueryKey = (id: number, params?: GetMessagesIdParams) =>
  [`/messages/${id}`, ...(params ? [params] : [])] as const;

export const getGetMessagesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getMessagesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetMessagesIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMessagesId>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getMessagesId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMessagesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMessagesId>>> = ({ signal }) =>
    getMessagesId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetMessagesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMessagesId>>>;
export type GetMessagesIdQueryError = ErrorType<Error>;

export const useGetMessagesId = <
  TData = Awaited<ReturnType<typeof getMessagesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetMessagesIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMessagesId>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMessagesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putMessagesId = (id: number, messageRequest: MessageRequest) => {
  return API<MessageResponse>({
    url: `/messages/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: messageRequest,
  });
};

export const getPutMessagesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMessagesId>>,
    TError,
    { id: number; data: MessageRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putMessagesId>>,
  TError,
  { id: number; data: MessageRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putMessagesId>>,
    { id: number; data: MessageRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putMessagesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutMessagesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMessagesId>>>;
export type PutMessagesIdMutationBody = MessageRequest;
export type PutMessagesIdMutationError = ErrorType<Error>;

export const usePutMessagesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMessagesId>>,
    TError,
    { id: number; data: MessageRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutMessagesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteMessagesId = (id: number) => {
  return API<number>({ url: `/messages/${id}`, method: "delete" });
};

export const getDeleteMessagesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMessagesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMessagesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMessagesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteMessagesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMessagesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMessagesId>>
>;

export type DeleteMessagesIdMutationError = ErrorType<Error>;

export const useDeleteMessagesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMessagesId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteMessagesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postMessagesIdLocalizations = (
  id: number,
  messageLocalizationRequest: MessageLocalizationRequest,
) => {
  return API<MessageLocalizationResponse>({
    url: `/messages/${id}/localizations`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: messageLocalizationRequest,
  });
};

export const getPostMessagesIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMessagesIdLocalizations>>,
    TError,
    { id: number; data: MessageLocalizationRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMessagesIdLocalizations>>,
  TError,
  { id: number; data: MessageLocalizationRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMessagesIdLocalizations>>,
    { id: number; data: MessageLocalizationRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return postMessagesIdLocalizations(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMessagesIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMessagesIdLocalizations>>
>;
export type PostMessagesIdLocalizationsMutationBody = MessageLocalizationRequest;
export type PostMessagesIdLocalizationsMutationError = ErrorType<Error>;

export const usePostMessagesIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMessagesIdLocalizations>>,
    TError,
    { id: number; data: MessageLocalizationRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostMessagesIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
